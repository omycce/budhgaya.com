// Simple Express server to serve the React app built into `server/build`
const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
// Compression for responses
try {
	const compression = require('compression');
	app.use(compression());
} catch (err) {
	// compression package may not be installed in some environments
}
app.use(express.json());
const PORT = process.env.PORT || 8080;

// Serve static files from the `build` folder generated by the client build
const buildPath = path.join(__dirname, 'build');
// Cache static assets aggressively; index.html should not be cached long-term
app.use((req, res, next) => {
	if (req.url.startsWith('/static/') || req.url.match(/\.(js|css|png|jpg|jpeg|webp|svg)$/)) {
		res.setHeader('Cache-Control', 'public, max-age=31536000, immutable');
	}
	next();
});
app.use(express.static(buildPath));

// Health endpoint for Cloud Run / health checks
app.get('/health', (req, res) => res.status(200).send('OK'));

// Community data store and API
const COMMUNITY_FILE = path.join(__dirname, 'data', 'community.json');
function ensureDataDir() {
	const dir = path.dirname(COMMUNITY_FILE);
	if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
	if (!fs.existsSync(COMMUNITY_FILE)) fs.writeFileSync(COMMUNITY_FILE, '[]', 'utf8');
}

app.get('/api/community', (req, res) => {
	try {
		ensureDataDir();
		const raw = fs.readFileSync(COMMUNITY_FILE, 'utf8');
		const items = JSON.parse(raw).sort((a,b)=> new Date(b.createdAt)-new Date(a.createdAt));
		res.json(items);
	} catch (err) {
		res.status(500).json({ error: 'failed to read data' });
	}
});

app.post('/api/community', (req, res) => {
	try {
		ensureDataDir();
		const raw = fs.readFileSync(COMMUNITY_FILE, 'utf8');
		const items = JSON.parse(raw);
		const id = Date.now().toString(36) + Math.random().toString(36).slice(2,6);
		const entry = { id, author: req.body.author || 'Anonymous', text: req.body.text || '', createdAt: new Date().toISOString() };
		items.push(entry);
		fs.writeFileSync(COMMUNITY_FILE, JSON.stringify(items, null, 2), 'utf8');
		res.json(entry);
	} catch (err) {
		res.status(500).json({ error: 'failed to write data' });
	}
});

// All remaining requests return the React app, so client-side routing works
app.get('*', (req, res) => {
	const indexFile = path.join(buildPath, 'index.html');
	if (!fs.existsSync(indexFile)) {
		return res.status(500).send('Client build not found.');
	}
	res.sendFile(indexFile);
});

// Start server and bind to 0.0.0.0 so Cloud Run can reach it
const LISTEN_HOST = process.env.LISTEN_HOST || '0.0.0.0';
app.listen(PORT, LISTEN_HOST, () => {
  // Server started
});

const CONTACT_FILE = path.join(__dirname, 'data', 'contacts.json');
function ensureContactFile() {
	const dir = path.dirname(CONTACT_FILE);
	if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
	if (!fs.existsSync(CONTACT_FILE)) fs.writeFileSync(CONTACT_FILE, '[]', 'utf8');
}

app.post('/api/contact', (req, res) => {
	try {
		ensureContactFile();
		const raw = fs.readFileSync(CONTACT_FILE, 'utf8');
		const items = JSON.parse(raw);
		const entry = { id: Date.now().toString(36), name: req.body.name, email: req.body.email, message: req.body.message, createdAt: new Date().toISOString() };
		items.push(entry);
		fs.writeFileSync(CONTACT_FILE, JSON.stringify(items, null, 2), 'utf8');
		res.json({ ok: true });
	} catch (err) {
		res.status(500).json({ error: 'failed to write contact' });
	}
});

// OpenAI proxy endpoint - keep API key on server
try {
	const { Configuration, OpenAIApi } = require('openai');
	const openaiConfig = new Configuration({ apiKey: process.env.OPENAI_API_KEY });
	const openai = new OpenAIApi(openaiConfig);

	app.post('/api/chat', async (req, res) => {
		const { message } = req.body || {};
		if (!message || typeof message !== 'string') return res.status(400).json({ error: 'message required' });
		try {
			const response = await openai.createChatCompletion({
				model: 'gpt-3.5-turbo',
				messages: [{ role: 'system', content: 'You are a friendly travel assistant for Bodh Gaya.' }, { role: 'user', content: message }],
				max_tokens: 250,
			});
			const reply = response.data?.choices?.[0]?.message?.content || 'Sorry, no response.';
			res.json({ reply });
		} catch (err) {
			console.error('OpenAI error', err?.message || err);
			res.status(500).json({ error: 'OpenAI request failed' });
		}
	});
} catch (err) {
	// If openai package not installed, we still want server to run.
	console.warn('OpenAI proxy not available (dependency missing). /api/chat disabled.');
}