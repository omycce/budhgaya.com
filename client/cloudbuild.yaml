options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # 1) Build the React app inside a node image
  - name: 'node:18'
    id: Build-app
    entrypoint: bash
    args:
      - -lc
      - |
        cd client
        npm ci
        npm run build

  # 2) Build Docker image (uses Docker inside Cloud Build)
  - name: 'gcr.io/cloud-builders/docker'
    id: Build-image
    args:
      - build
      - '-t'
      - 'gcr.io/${PROJECT_ID}/${_IMAGE}:${_SHORT_SHA}'
      - client

  # 3) Push image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    id: Push-image
    args:
      - push
      - 'gcr.io/${PROJECT_ID}/${_IMAGE}:${_SHORT_SHA}'

  # 4) Deploy to Cloud Run (managed)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: Deploy
    entrypoint: gcloud
    args:
      - run
      - deploy
      - '${_SERVICE}'
      - '--image'
      - 'gcr.io/${PROJECT_ID}/${_IMAGE}:${_SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      # If you want to map secrets to runtime, do it here (example commented)
      # - '--set-secrets'
      # - 'OPENAI_API_KEY=projects/${PROJECT_ID}/secrets/openai-api-key:latest'

images:
  - 'gcr.io/${PROJECT_ID}/${_IMAGE}:${_SHORT_SHA}'

# multi-stage Dockerfile for React app -> nginx
FROM node:18 AS builder
WORKDIR /app
COPY package.json package-lock.json ./
# if your client has its own package.json inside client/, adjust COPY accordingly
RUN npm ci
COPY . .
WORKDIR /app/client
RUN npm ci --no-audit --no-fund
RUN npm run build

FROM nginx:stable-alpine
COPY --from=builder /app/client/build /usr/share/nginx/html
# optional: include custom nginx.conf at client/nginx.conf if you use one
# COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]
node_modules
npm-debug.log
.git
.gitignore
client/node_modules
client/.env
build
dist